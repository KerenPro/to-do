{"version":3,"sources":["components/TodoForm/TodoForm.js","components/Todo/Todo.js","components/TodoList/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","props","useState","id","task","completed","todo","setTodo","className","onSubmit","e","preventDefault","trim","addTodo","uuid","style","display","flexDirection","alignItems","TextField","label","name","type","value","onChange","target","Button","Todo","ListItem","Checkbox","checked","onClick","toggleComplete","Typography","variant","textDecoration","IconButton","removeTodo","TodoList","List","todos","map","LOCAL_STORAGE_KEY","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","removeTodos","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAwCeA,MApCf,SAAkBC,GAAQ,IAAD,EAEGC,mBAAS,CAC7BC,GAAI,GACJC,KAAM,GACNC,WAAW,IALM,mBAEdC,EAFc,KAERC,EAFQ,KA4BrB,OACI,uBAAMC,UAAU,YAAYC,SAjBhC,SAAsBC,GAClBA,EAAEC,iBACCL,EAAKF,KAAKQ,QACTX,EAAMY,QAAN,2BAAkBP,GAAlB,IAAwBH,GAAGW,SAI/BP,EAAQ,2BAAID,GAAL,IAAWF,KAAM,OAU4BW,MAPlC,CAClBC,QAAS,OACTC,cAAe,MACfC,WAAY,UAIZ,UACI,cAACC,EAAA,EAAD,CAAWC,MAAM,OAAOC,KAAK,OAAOC,KAAK,OAAOC,MAAOjB,EAAKF,KAAMoB,SAtB1E,SAA+Bd,GAC3BH,EAAQ,2BAAID,GAAL,IAAWF,KAAMM,EAAEe,OAAOF,YAsB7B,cAACG,EAAA,EAAD,CAAQJ,KAAK,SAAb,wB,0CCPGK,MAxBf,SAAc1B,GAUV,OACI,eAAC2B,EAAA,EAAD,CAAUb,MAAO,CAACC,QAAQ,QAA1B,UACI,cAACa,EAAA,EAAD,CAAUC,QAAS7B,EAAMK,KAAKD,UAAW0B,QAVjD,WACI9B,EAAM+B,eAAe/B,EAAMK,KAAKH,OAU5B,cAAC8B,EAAA,EAAD,CAAYC,QAAQ,QACpBnB,MAAO,CAACoB,eAAgBlC,EAAMK,KAAKD,UAAY,eAAiB,MADhE,SAEEJ,EAAMK,KAAKF,OACb,cAACgC,EAAA,EAAD,CAAYL,QAVpB,WACI9B,EAAMoC,WAAWpC,EAAMK,KAAKH,KASxB,SACI,cAAC,IAAD,UCPDmC,MAVf,SAAkBrC,GAEd,OACI,cAACsC,EAAA,EAAD,UACKtC,EAAMuC,MAAMC,KAAI,SAAAnC,GAAI,OACrB,cAAC,EAAD,CAAoBA,KAAMA,EAAM0B,eAAgB/B,EAAM+B,eAAgBK,WAAYpC,EAAMoC,YAA7E/B,EAAKH,UCHtBuC,EAAoB,wBA+CXC,MA7Cf,WAAgB,IAAD,EAEezC,mBAAS,IAFxB,mBAEJsC,EAFI,KAEGI,EAFH,KAoCX,OAhCAC,qBAAU,WACN,IAAMC,EAAeC,KAAKC,MAAMC,aAAaC,QAAQR,IACjDI,GACAF,EAASE,KAEd,IAEHD,qBAAU,WACNI,aAAaE,QAAQT,EAAmBK,KAAKK,UAAUZ,MACxD,CAACA,IAwBA,sBAAKhC,UAAU,MAAf,UACQ,cAACyB,EAAA,EAAD,CAAYlB,MAAO,CAACsC,QAAQ,IAAKnB,QAAQ,KAAzC,wBACA,cAAC,EAAD,CAAUrB,QAxBtB,SAAiBP,GACbsC,EAAQ,CAAGtC,GAAH,mBAAYkC,QAwBZ,cAAC,EAAD,CAAUA,MAAOA,EAAOR,eArBpC,SAAwB7B,GACpByC,EACIJ,EAAMC,KAAI,SAAAnC,GACN,OAAIA,EAAKH,KAAOA,EACL,2BACAG,GADP,IACaD,WAAWC,EAAKD,YAG1BC,OAaiDgD,YARpE,SAAqBnD,GACjByC,EAASJ,EAAMe,QAAO,SAAAjD,GAAI,OAAIA,EAAKH,KAAOA,aC7BnCqD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c5ad6a86.chunk.js","sourcesContent":["import {Button, TextField} from \"@material-ui/core\";\r\nimport React, {useState} from \"react\";\r\nimport uuid from 'react-uuid';\r\n\r\nfunction TodoForm(props) {\r\n\r\n    const [todo, setTodo] = useState({\r\n        id: \"\",\r\n        task: \"\",\r\n        completed: false \r\n    });\r\n\r\n    function handleTaskInputChange(e){\r\n        setTodo({...todo, task: e.target.value});\r\n    }\r\n\r\n    function handleSubmit(e){\r\n        e.preventDefault();\r\n        if(todo.task.trim()){\r\n            props.addTodo({...todo, id:uuid()});\r\n        }\r\n\r\n        //reset task input\r\n        setTodo({...todo, task: \"\"});\r\n    }\r\n\r\n    const todoFormStyle = {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\"\r\n    }\r\n\r\n    return (\r\n        <form className=\"todo-form\" onSubmit={handleSubmit} style={todoFormStyle}>\r\n            <TextField label=\"Task\" name=\"task\" type=\"text\" value={todo.task} onChange={handleTaskInputChange}/>\r\n            <Button type=\"submit\">Submit</Button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import {Checkbox, IconButton, ListItem, Typography} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/core/Icon\"\r\nimport React from \"react\";\r\n\r\nfunction Todo(props){\r\n\r\n    function handleCheckBoxClick(){\r\n        props.toggleComplete(props.todo.id);\r\n    }\r\n\r\n    function handleRemoveClick(){\r\n        props.removeTodo(props.todo.id);\r\n    }\r\n\r\n    return (\r\n        <ListItem style={{display:\"flex\"}}>\r\n            <Checkbox checked={props.todo.completed} onClick={handleCheckBoxClick} />\r\n            <Typography variant=\"body1\"\r\n            style={{textDecoration: props.todo.completed ? \"line-through\" : null}}\r\n            >{props.todo.task}</Typography>\r\n            <IconButton onClick={handleRemoveClick} >\r\n                <CloseIcon/>\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n\r\n}\r\n\r\nexport default Todo;","import {List} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport Todo from \"../Todo/Todo\";\r\n\r\nfunction TodoList(props){\r\n\r\n    return (\r\n        <List>\r\n            {props.todos.map(todo =>\r\n            <Todo key={todo.id} todo={todo} toggleComplete={props.toggleComplete} removeTodo={props.removeTodo} />)}\r\n        </List>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import Typography from \"@material-ui/core/Typography\";\r\nimport './App.css';\r\nimport React, {useState, useEffect} from \"react\";\r\nimport TodoForm from \"./components/TodoForm/TodoForm\";\r\nimport TodoList from \"./components/TodoList/TodoList\";\r\n\r\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\r\n\r\nfunction App() {\r\n\r\n    const [todos, setTodos] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\r\n        if (storageTodos){\r\n            setTodos(storageTodos);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(()=> {\r\n        localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\r\n    }, [todos]);\r\n\r\n    function addTodo(todo){\r\n        setTodos ([todo, ...todos]);\r\n    }\r\n\r\n    function toggleComplete(id){\r\n        setTodos(\r\n            todos.map(todo => {\r\n                if (todo.id === id){\r\n                    return {\r\n                        ...todo, completed:!todo.completed\r\n                    }\r\n                }\r\n                return todo;\r\n            })\r\n        )\r\n    }\r\n\r\n    function removeTodo (id){\r\n        setTodos(todos.filter(todo => todo.id !== id))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n                <Typography style={{padding:16}} variant=\"h1\">React Todo</Typography>\r\n                <TodoForm addTodo={addTodo}/>\r\n                <TodoList todos={todos} toggleComplete={toggleComplete} removeTodos={removeTodo} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}